// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.15.5
// source: proto/logical.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type PingMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PingMessage) Reset() {
	*x = PingMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_logical_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingMessage) ProtoMessage() {}

func (x *PingMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_logical_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingMessage.ProtoReflect.Descriptor instead.
func (*PingMessage) Descriptor() ([]byte, []int) {
	return file_proto_logical_proto_rawDescGZIP(), []int{0}
}

type CallMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table   string `protobuf:"bytes,1,opt,name=table,proto3" json:"table"`
	Operate string `protobuf:"bytes,2,opt,name=operate,proto3" json:"operate"`
	Key     string `protobuf:"bytes,3,opt,name=key,proto3" json:"key"`
}

func (x *CallMessage) Reset() {
	*x = CallMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_logical_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallMessage) ProtoMessage() {}

func (x *CallMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_logical_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallMessage.ProtoReflect.Descriptor instead.
func (*CallMessage) Descriptor() ([]byte, []int) {
	return file_proto_logical_proto_rawDescGZIP(), []int{1}
}

func (x *CallMessage) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *CallMessage) GetOperate() string {
	if x != nil {
		return x.Operate
	}
	return ""
}

func (x *CallMessage) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type Reply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  bool   `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`
}

func (x *Reply) Reset() {
	*x = Reply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_logical_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reply) ProtoMessage() {}

func (x *Reply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_logical_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reply.ProtoReflect.Descriptor instead.
func (*Reply) Descriptor() ([]byte, []int) {
	return file_proto_logical_proto_rawDescGZIP(), []int{2}
}

func (x *Reply) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *Reply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_proto_logical_proto protoreflect.FileDescriptor

var file_proto_logical_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0e, 0x0a, 0x0c,
	0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x50, 0x0a, 0x0c,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x39,
	0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x66, 0x0a, 0x0e, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x04, 0x70,
	0x69, 0x6e, 0x67, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x29, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x13,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_logical_proto_rawDescOnce sync.Once
	file_proto_logical_proto_rawDescData = file_proto_logical_proto_rawDesc
)

func file_proto_logical_proto_rawDescGZIP() []byte {
	file_proto_logical_proto_rawDescOnce.Do(func() {
		file_proto_logical_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_logical_proto_rawDescData)
	})
	return file_proto_logical_proto_rawDescData
}

var file_proto_logical_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_proto_logical_proto_goTypes = []interface{}{
	(*PingMessage)(nil), // 0: proto.ping_message
	(*CallMessage)(nil), // 1: proto.call_message
	(*Reply)(nil),       // 2: proto.reply
}
var file_proto_logical_proto_depIdxs = []int32{
	0, // 0: proto.LogicalHandler.ping:input_type -> proto.ping_message
	1, // 1: proto.LogicalHandler.call:input_type -> proto.call_message
	2, // 2: proto.LogicalHandler.ping:output_type -> proto.reply
	2, // 3: proto.LogicalHandler.call:output_type -> proto.reply
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_logical_proto_init() }
func file_proto_logical_proto_init() {
	if File_proto_logical_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_logical_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_logical_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_logical_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_logical_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_logical_proto_goTypes,
		DependencyIndexes: file_proto_logical_proto_depIdxs,
		MessageInfos:      file_proto_logical_proto_msgTypes,
	}.Build()
	File_proto_logical_proto = out.File
	file_proto_logical_proto_rawDesc = nil
	file_proto_logical_proto_goTypes = nil
	file_proto_logical_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LogicalHandlerClient is the client API for LogicalHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogicalHandlerClient interface {
	Ping(ctx context.Context, in *PingMessage, opts ...grpc.CallOption) (*Reply, error)
	Call(ctx context.Context, in *CallMessage, opts ...grpc.CallOption) (*Reply, error)
}

type logicalHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewLogicalHandlerClient(cc grpc.ClientConnInterface) LogicalHandlerClient {
	return &logicalHandlerClient{cc}
}

func (c *logicalHandlerClient) Ping(ctx context.Context, in *PingMessage, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/proto.LogicalHandler/ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicalHandlerClient) Call(ctx context.Context, in *CallMessage, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/proto.LogicalHandler/call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogicalHandlerServer is the server API for LogicalHandler service.
type LogicalHandlerServer interface {
	Ping(context.Context, *PingMessage) (*Reply, error)
	Call(context.Context, *CallMessage) (*Reply, error)
}

// UnimplementedLogicalHandlerServer can be embedded to have forward compatible implementations.
type UnimplementedLogicalHandlerServer struct {
}

func (*UnimplementedLogicalHandlerServer) Ping(context.Context, *PingMessage) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedLogicalHandlerServer) Call(context.Context, *CallMessage) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}

func RegisterLogicalHandlerServer(s *grpc.Server, srv LogicalHandlerServer) {
	s.RegisterService(&_LogicalHandler_serviceDesc, srv)
}

func _LogicalHandler_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicalHandlerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LogicalHandler/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicalHandlerServer).Ping(ctx, req.(*PingMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogicalHandler_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicalHandlerServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LogicalHandler/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicalHandlerServer).Call(ctx, req.(*CallMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _LogicalHandler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.LogicalHandler",
	HandlerType: (*LogicalHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ping",
			Handler:    _LogicalHandler_Ping_Handler,
		},
		{
			MethodName: "call",
			Handler:    _LogicalHandler_Call_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/logical.proto",
}
