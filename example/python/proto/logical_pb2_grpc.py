# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto import logical_pb2 as proto_dot_logical__pb2


class LogicalHandlerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ping = channel.unary_unary(
            '/proto.LogicalHandler/ping',
            request_serializer=proto_dot_logical__pb2.ping_message.SerializeToString,
            response_deserializer=proto_dot_logical__pb2.reply.FromString,
        )
        self.call = channel.unary_unary(
            '/proto.LogicalHandler/call',
            request_serializer=proto_dot_logical__pb2.call_message.SerializeToString,
            response_deserializer=proto_dot_logical__pb2.reply.FromString,
        )


class LogicalHandlerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def call(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LogicalHandlerServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'ping': grpc.unary_unary_rpc_method_handler(
            servicer.ping,
            request_deserializer=proto_dot_logical__pb2.ping_message.FromString,
            response_serializer=proto_dot_logical__pb2.reply.SerializeToString,
        ),
        'call': grpc.unary_unary_rpc_method_handler(
            servicer.call,
            request_deserializer=proto_dot_logical__pb2.call_message.FromString,
            response_serializer=proto_dot_logical__pb2.reply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'proto.LogicalHandler', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class LogicalHandler(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ping(request,
             target,
             options=(),
             channel_credentials=None,
             call_credentials=None,
             insecure=False,
             compression=None,
             wait_for_ready=None,
             timeout=None,
             metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.LogicalHandler/ping',
                                             proto_dot_logical__pb2.ping_message.SerializeToString,
                                             proto_dot_logical__pb2.reply.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def call(request,
             target,
             options=(),
             channel_credentials=None,
             call_credentials=None,
             insecure=False,
             compression=None,
             wait_for_ready=None,
             timeout=None,
             metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.LogicalHandler/call',
                                             proto_dot_logical__pb2.call_message.SerializeToString,
                                             proto_dot_logical__pb2.reply.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
